import{d as R,p as V,J as j,f as _,k as E,s as J,h as e,j as M,t as x,r as f,v as Q,g as p,n as T,i as a,w as i,m as G,E as H,B as L}from"../chunks/D9dWO0Sc.js";import{b as s,a as o}from"../chunks/BdGMWZf_.js";import{W as Y,a as Z}from"../chunks/D_auFp29.js";import"../chunks/B_es5EVb.js";import"../chunks/COEqP30R.js";import"../chunks/hAlw3l8v.js";import"../chunks/DvEoYHKW.js";import"../chunks/BAURvd7r.js";import"../chunks/Dob3nYDb.js";function P(){const l={id:`sample-${Date.now()}`,title:`Sample Module ${s.content.nodes.size+1}`,type:"module",metadata:{difficulty:Math.floor(Math.random()*5)+1,estimatedTime:Math.floor(Math.random()*60)+15,prerequisites:[],tags:["sample","demo"]},progress:{completed:!1,lastAccessed:new Date}};o.addKnowledgeNode(l),o.addNotification({type:"success",message:`Added new module: ${l.title}`})}function U(){o.setOnlineStatus(!s.sync.isOnline),o.addNotification({type:"info",message:`Switched to ${s.sync.isOnline?"online":"offline"} mode`})}var X=(l,r)=>E(r,"demo"),ee=(l,r)=>E(r,"editor"),te=()=>o.addNotification({type:"info",message:"Test notification!"}),ae=_(`<div class="welcome svelte-1yi0ug9"><h2>Welcome to the Interactive Knowledge System</h2> <p>This demonstrates the core foundation with Svelte 5 runes-based reactive state management
					and the new Content Editor component.</p> <div class="demo-actions svelte-1yi0ug9"><h3>Demo Actions</h3> <button class="svelte-1yi0ug9">Add Sample Content</button> <button class="svelte-1yi0ug9">Toggle Online/Offline Mode</button> <button class="svelte-1yi0ug9">Show Test Notification</button></div> <div class="features svelte-1yi0ug9"><h3>Implemented Features</h3> <ul class="svelte-1yi0ug9"><li class="svelte-1yi0ug9">✅ TypeScript interfaces for all core data models</li> <li class="svelte-1yi0ug9">✅ Svelte 5 runes-based reactive state management</li> <li class="svelte-1yi0ug9">✅ Global application state with derived values</li> <li class="svelte-1yi0ug9">✅ Side effects using $effect rune</li> <li class="svelte-1yi0ug9">✅ Auto-save functionality with debouncing</li> <li class="svelte-1yi0ug9">✅ Online/offline status monitoring</li> <li class="svelte-1yi0ug9">✅ Notification system</li> <li class="svelte-1yi0ug9">✅ Content Editor with rich text editing</li> <li class="svelte-1yi0ug9">✅ Content block system (text, image, video, code, quiz, flashcard)</li> <li class="svelte-1yi0ug9">✅ Drag-and-drop functionality for reordering blocks</li> <li class="svelte-1yi0ug9">✅ Keyboard shortcuts (Ctrl+S to save, Ctrl+Z to undo)</li></ul></div> <div class="dashboard-embed"><h3>Web Content Sourcing</h3> <!></div> <div class="state-debug svelte-1yi0ug9"><h3>Current State (Debug)</h3> <details><summary>View Raw State</summary> <pre class="svelte-1yi0ug9"> </pre></details></div></div>`),ie=_('<div class="editor-container svelte-1yi0ug9"><!></div>'),se=_('<div class="app-container svelte-1yi0ug9"><nav class="nav-bar svelte-1yi0ug9"><h1 class="svelte-1yi0ug9">Interactive Knowledge System</h1> <div class="nav-buttons svelte-1yi0ug9"><a class="nav-btn svelte-1yi0ug9" href="/articles/machine-learning">🧠 ML Article</a> <button>📊 Demo</button> <button>✏️ Content Editor</button></div></nav> <main class="main-content svelte-1yi0ug9"><!></main></div>');function ge(l,r){V(r,!0),j(()=>{s.content.nodes.has("bagging-random-forests-article")||(o.addKnowledgeNode({id:"bagging-random-forests-article",title:"Bagging and Random Forests: Interactive Article",type:"module",metadata:{difficulty:3,estimatedTime:30,prerequisites:[],tags:["machine-learning","random-forests","bagging","ensemble-learning","visualization"]},progress:{completed:!1,lastAccessed:new Date}}),o.addNotification({type:"success",message:"Added Bagging and Random Forests article to dashboard!"}))});let d=J("demo"),W=[{id:"sample-text-1",type:"text",content:{html:"<h2>Welcome to the Content Editor</h2><p>This is a sample text block. You can edit this content directly.</p>"},metadata:{created:new Date,modified:new Date,version:1}},{id:"sample-code-1",type:"code",content:{code:`function hello() {
  console.log("Hello, World!");
}`,language:"javascript"},metadata:{created:new Date,modified:new Date,version:1}}];function B(t){console.log("Content saved:",t),o.addNotification({type:"success",message:`Saved ${t.length} content blocks`})}var y=se(),h=a(y),w=e(a(h),2),b=e(a(w),2);let S;b.__click=[X,d];var k=e(b,2);let C;k.__click=[ee,d],i(w),i(h);var D=e(h,2),K=a(D);{var z=t=>{var n=ae(),v=e(a(n),4),g=e(a(v),2);g.__click=[P];var c=e(g,2);c.__click=[U];var u=e(c,2);u.__click=[te],i(v);var m=e(v,4),$=e(a(m),2);Y($,{}),i(m);var N=e(m,2),O=e(a(N),2),A=e(a(O),2),q=a(A,!0);i(A),i(O),i(N),i(n),x(F=>G(q,F),[()=>JSON.stringify({contentNodes:s.content.nodes.size,currentView:s.ui.currentView,isOnline:s.sync.isOnline,notifications:s.ui.notifications.length,searchQuery:s.content.searchQuery},null,2)]),f(t,n)},I=t=>{var n=H(),v=L(n);{var g=c=>{var u=ie(),m=a(u);Z(m,{get initialBlocks(){return W},onsave:B,autoSave:!0,autoSaveDelay:2e3}),i(u),f(c,u)};M(v,c=>{p(d)==="editor"&&c(g)},!0)}f(t,n)};M(K,t=>{p(d)==="demo"?t(z):t(I,!1)})}i(D),i(y),x((t,n)=>{S=T(b,1,"nav-btn svelte-1yi0ug9",null,S,t),C=T(k,1,"nav-btn svelte-1yi0ug9",null,C,n)},[()=>({active:p(d)==="demo"}),()=>({active:p(d)==="editor"})]),f(l,y),Q()}R(["click"]);export{ge as component};
